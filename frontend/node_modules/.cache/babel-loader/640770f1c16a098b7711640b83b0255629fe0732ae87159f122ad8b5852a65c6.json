{"ast":null,"code":"var _jsxFileName = \"/Users/ztlab98/Downloads/shopping-react-assignment-main/src/pages/SignupPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\"\n// import * as yup from \"yup\"\n// import { useForm } from \"react-hook-form\"\n// import { yupResolver } from \"@hookform/resolvers/yup\"\n// import { Link } from \"react-router-dom\"\n// import \"./Signup.css\"\n// import { regex } from \"../App\"\n// import { encryptPassword } from \"../utils/helperFunctions\"\n\n// export default function SignupPage() {\n//   // const [users, setUsers] = useState([])\n//   const [successMessage, setSuccessMessage] = useState(\"\")\n//   const [error, setError] = useState(false)\n\n//   let userData = \"\"\n\n//   const onSubmit = (submittedData) => {\n//     const hash = encryptPassword(submittedData.password)\n\n//     submittedData.password = hash\n//     submittedData.confirmPassword = hash\n\n//     let users = JSON.parse(localStorage.getItem(\"users\") || \"[]\")\n\n//     // Check If the User is Already Registered or Not\n//     userData = users?.filter((user) => {\n//       return user.email === submittedData.email\n//     })\n\n//     console.log(\"userdata\", userData.length)\n//     if (userData.length > 0) {\n//       // return\n//       setError(true)\n\n//       setTimeout(() => {\n//         setError(false)\n//       }, 5000)\n//     } else {\n//       // const newUser = { ...submittedData }\n//       // setUsers((prevUsers) => [...prevUsers, newUser])\n//       // localStorage.setItem(\"currentSignUpUser\", JSON.stringify(submittedData))\n\n//       users.push(submittedData)\n//       localStorage.setItem(\"users\", JSON.stringify(users))\n//       setSuccessMessage(\"Signup successful!\")\n\n//       // Clear the success message after 5 seconds (5000 milliseconds)\n//       setTimeout(() => {\n//         setSuccessMessage(\"\")\n//       }, 5000)\n//     }\n\n//     // let users = JSON.parse(localStorage.getItem(\"users\") || \"[]\")\n//     // users.push(submittedData)\n//     // localStorage.setItem(\"users\", JSON.stringify(users))\n//   }\n\n//   // useEffect(() => {\n//   //   localStorage.setItem(\"users\", JSON.stringify(users))\n//   // }, [users])\n\n//   const schema = yup.object().shape({\n//     firstName: yup.string().required(),\n//     lastName: yup.string().required(),\n//     mobileNumber: yup.string().min(10).max(10).required(),\n//     email: yup.string().email().required(),\n//     password: yup\n//       .string()\n//       .required()\n//       .max(32)\n//       .min(8)\n//       .matches(\n//         regex,\n//         \"Password must contain at least 8 characters, one uppercase, one number and one special case character\"\n//       ),\n//     confirmPassword: yup\n//       .string()\n//       .oneOf([yup.ref(\"password\"), null], \"Passwords must match\")\n//       .required(),\n//   })\n\n//   const {\n//     handleSubmit,\n//     register,\n//     formState: { errors },\n//   } = useForm({ resolver: yupResolver(schema) })\n\n//   return (\n//     <div className=\"container h-100\">\n//       {error && <p>User Already Exists.</p>}\n//       {successMessage && <p className=\"success-message\">{successMessage}</p>}\n//       <div class=\"row align-items-center\" style={{ height: \"100vh\" }}>\n//         <div class=\"mx-auto col-10 col-md-8 col-lg-6\">\n//           <form\n//             onSubmit={handleSubmit(onSubmit)}\n//             // className=\"signupForm\"\n//           >\n//             <h3 className=\"text-center mb-4\">Signup Form</h3>\n\n//             <div className=\"row\">\n//               <div className=\"w-25 mb-3\">\n//                 <label htmlFor=\"firstName\" className=\"form-label\">\n//                   First Name\n//                 </label>\n//                 <input\n//                   className=\"form-control\"\n//                   type=\"text\"\n//                   placeholder=\"First Name\"\n//                   {...register(\"firstName\")}\n//                   name=\"firstName\"\n//                 />\n//                 <div className=\"form-text\">\n//                   {errors.firstName && <>{errors.firstName.message}</>}\n//                 </div>\n//               </div>\n\n//               <div className=\"w-25 mb-3\">\n//                 <label htmlFor=\"lastName\" className=\"form-label\">\n//                   Last Name\n//                 </label>\n//                 <input\n//                   className=\"form-control\"\n//                   type=\"text\"\n//                   placeholder=\"Last Name\"\n//                   name=\"lastName\"\n//                   {...register(\"lastName\")}\n//                 />\n//               </div>\n\n//               <div className=\"form-text\">\n//                 {errors.lastName && <>{errors.lastName.message}</>}\n//               </div>\n//             </div>\n\n//             <div className=\"row\">\n//               <div className=\"w-25 mb-3\">\n//                 <label htmlFor=\"mobileNumber\" className=\"form-label\">\n//                   Mobile Number\n//                 </label>\n//                 <input\n//                   className=\"form-control\"\n//                   type=\"number\"\n//                   placeholder=\"Mobile Number\"\n//                   name=\"mobileNumber\"\n//                   {...register(\"mobileNumber\")}\n//                 />\n\n//                 <div className=\"form-text\">\n//                   {errors.mobileNumber && <>{errors.mobileNumber.message}</>}\n//                 </div>\n//               </div>\n\n//               <div className=\"w-25 mb-3\">\n//                 <label htmlFor=\"email\" className=\"form-label\">\n//                   Email\n//                 </label>\n//                 <input\n//                   className=\"form-control\"\n//                   type=\"email\"\n//                   placeholder=\"Email\"\n//                   name=\"email\"\n//                   {...register(\"email\")}\n//                 />\n//                 <div className=\"form-text\">\n//                   {errors.email && <>{errors.email.message}</>}\n//                 </div>\n//               </div>\n//             </div>\n\n//             <div className=\"row\">\n//               <div className=\"w-25 mb-3\">\n//                 <label htmlFor=\"password\" className=\"form-label\">\n//                   Password\n//                 </label>\n//                 <input\n//                   className=\"form-control\"\n//                   type=\"password\"\n//                   placeholder=\"Password\"\n//                   name=\"password\"\n//                   {...register(\"password\")}\n//                 />\n//                 <div className=\"form-text\">\n//                   {errors.password && <>{errors.password.message}</>}\n//                 </div>\n//               </div>\n\n//               <div className=\"w-25 mb-3\">\n//                 <label htmlFor=\"confirmPassword\" className=\"form-label\">\n//                   Confirm Password\n//                 </label>\n//                 <input\n//                   className=\"form-control\"\n//                   type=\"password\"\n//                   placeholder=\"Confirm Password\"\n//                   name=\"confirmPassword\"\n//                   {...register(\"confirmPassword\")}\n//                 />\n//                 <div className=\"form-text\">\n//                   {errors.confirmPassword && (\n//                     <>{errors.confirmPassword.message}</>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n\n//             <div>\n//               <button type=\"submit\" className=\"btn btn-primary me-3\">\n//                 SignUp\n//               </button>\n//               {console.log(\"errors : \", errors)}\n//               <Link to=\"/login\" className=\"me-3\">\n//                 Already have an account?\n//               </Link>\n//             </div>\n//           </form>\n//         </div>\n//       </div>\n//     </div>\n//   )\n// }\n\n// import React from \"react\"\n// import { Link } from \"react-router-dom\"\n// import * as yup from \"yup\"\n// import { yupResolver } from \"@hookform/resolvers/yup\"\n// import { useForm } from \"react-hook-form\"\n// import { useNavigate } from \"react-router-dom\"\n// import bcrypt from \"bcryptjs-react\"\n// import { useState } from \"react\"\n\n// import \"./Signup.css\"\n// import { useAuth } from \"../utils/auth\"\n// import { regex } from \"../App\"\n\n// export default function SignupPage() {\n//   const navigate = useNavigate()\n//   const [error, setError] = useState(\"\")\n//   const auth = useAuth()\n\n//   const schema = yup.object().shape({\n//     firstName: yup.string().required(\"First Name is required\"),\n//     lastName: yup.string().required(\"Last Name is required\"),\n//     mobileNumber: yup\n//       .string()\n//       .matches(/^[0-9]{10}$/, \"Mobile Number should be 10 digits\")\n//       .required(\"Mobile Number is required\"),\n//     email: yup.string().email().required(\"Email is required\"),\n//     password: yup\n//       .string()\n//       .required(\"Password is required\")\n//       .max(32, \"Password should be at most 32 characters\")\n//       .min(8, \"Password should be at least 8 characters\")\n//       .matches(regex, \"Password should meet requirements\"),\n//     confirmPassword: yup\n//       .string()\n//       .oneOf([yup.ref(\"password\"), null], \"Passwords must match\")\n//       .required(\"Confirm Password is required\"),\n//   })\n\n//   const onSubmit = (submittedData) => {\n//     console.log(submittedData)\n//     // Add your signup logic here.\n//   }\n\n//   const {\n//     handleSubmit,\n//     register,\n//     formState: { errors },\n//   } = useForm({ resolver: yupResolver(schema) })\n\n// }\n\nimport React, { useState } from \"react\";\nimport * as yup from \"yup\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { Link } from \"react-router-dom\";\nimport \"./Signup.css\";\nimport { regex } from \"../App\";\nimport { encryptPassword } from \"../utils/helperFunctions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SignupPage() {\n  _s();\n  // const [users, setUsers] = useState([])\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  let userData = \"\";\n  const onSubmit = submittedData => {\n    const hash = encryptPassword(submittedData.password);\n    submittedData.password = hash;\n    submittedData.confirmPassword = hash;\n    let users = JSON.parse(localStorage.getItem(\"users\") || \"[]\");\n\n    // Check If the User is Already Registered or Not\n    userData = users === null || users === void 0 ? void 0 : users.filter(user => {\n      return user.email === submittedData.email;\n    });\n    console.log(\"userdata\", userData.length);\n    if (userData.length > 0) {\n      // return\n      setError(\"User Already Exists\");\n      setTimeout(() => {\n        setError(false);\n      }, 5000);\n    } else {\n      // const newUser = { ...submittedData }\n      // setUsers((prevUsers) => [...prevUsers, newUser])\n      // localStorage.setItem(\"currentSignUpUser\", JSON.stringify(submittedData))\n\n      users.push(submittedData);\n      localStorage.setItem(\"users\", JSON.stringify(users));\n      setSuccessMessage(\"Signup successful!\");\n\n      // Clear the success message after 5 seconds (5000 milliseconds)\n      setTimeout(() => {\n        setSuccessMessage(\"\");\n      }, 5000);\n    }\n\n    // let users = JSON.parse(localStorage.getItem(\"users\") || \"[]\")\n    // users.push(submittedData)\n    // localStorage.setItem(\"users\", JSON.stringify(users))\n  };\n\n  // useEffect(() => {\n  //   localStorage.setItem(\"users\", JSON.stringify(users))\n  // }, [users])\n\n  const schema = yup.object().shape({\n    firstName: yup.string().required(),\n    lastName: yup.string().required(),\n    mobileNumber: yup.string().min(10).max(10).required(),\n    email: yup.string().email().required(),\n    password: yup.string().required().max(32).min(8).matches(regex, \"Password must contain at least 8 characters, one uppercase, one number and one special case character\"),\n    confirmPassword: yup.string().oneOf([yup.ref(\"password\"), null], \"Passwords must match\").required()\n  });\n  const {\n    handleSubmit,\n    register,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(schema)\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container h-100\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"alert alert-danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 17\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"alert alert-success\",\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row align-items-center\",\n      style: {\n        height: \"100vh\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mx-auto col-10 col-md-8 col-lg-6\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit(onSubmit),\n          className: \"p-4 border rounded bg-white\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-center mb-4\",\n            children: \"Signup Form\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"firstName\",\n              className: \"form-label\",\n              children: \"First Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-control\",\n              type: \"text\",\n              placeholder: \"First Name\",\n              name: \"firstName\",\n              ...register(\"firstName\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-text\",\n              children: errors.firstName && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-danger\",\n                children: errors.firstName.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"lastName\",\n              className: \"form-label\",\n              children: \"Last Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-control\",\n              type: \"text\",\n              placeholder: \"Last Name\",\n              name: \"lastName\",\n              ...register(\"lastName\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-text\",\n              children: errors.lastName && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-danger\",\n                children: errors.lastName.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"mobileNumber\",\n              className: \"form-label\",\n              children: \"Mobile Number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-control\",\n              type: \"text\",\n              placeholder: \"Mobile Number\",\n              name: \"mobileNumber\",\n              ...register(\"mobileNumber\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-text\",\n              children: errors.mobileNumber && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-danger\",\n                children: errors.mobileNumber.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"email\",\n              className: \"form-label\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-control\",\n              type: \"text\",\n              placeholder: \"Email\",\n              name: \"email\",\n              ...register(\"email\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-text\",\n              children: errors.email && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-danger\",\n                children: errors.email.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 441,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"password\",\n              className: \"form-label\",\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-control\",\n              type: \"password\",\n              placeholder: \"Password\",\n              name: \"password\",\n              ...register(\"password\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 450,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-text\",\n              children: errors.password && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-danger\",\n                children: errors.password.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 459,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"confirmPassword\",\n              className: \"form-label\",\n              children: \"Confirm Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-control\",\n              type: \"password\",\n              placeholder: \"Confirm Password\",\n              name: \"confirmPassword\",\n              ...register(\"confirmPassword\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-text\",\n              children: errors.confirmPassword && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-danger\",\n                children: errors.confirmPassword.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 477,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center mb-2\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"btn btn-primary\",\n              children: \"Signup\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: [\"Already have an account? \", /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/login\",\n              children: \"Login Here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 40\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 361,\n    columnNumber: 5\n  }, this);\n}\n_s(SignupPage, \"M3GjbIWT/GcONVARteFh4LCEp2w=\", false, function () {\n  return [useForm];\n});\n_c = SignupPage;\nvar _c;\n$RefreshReg$(_c, \"SignupPage\");","map":{"version":3,"names":["React","useState","yup","useForm","yupResolver","Link","regex","encryptPassword","jsxDEV","_jsxDEV","SignupPage","_s","successMessage","setSuccessMessage","error","setError","userData","onSubmit","submittedData","hash","password","confirmPassword","users","JSON","parse","localStorage","getItem","filter","user","email","console","log","length","setTimeout","push","setItem","stringify","schema","object","shape","firstName","string","required","lastName","mobileNumber","min","max","matches","oneOf","ref","handleSubmit","register","formState","errors","resolver","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","height","htmlFor","type","placeholder","name","message","to","_c","$RefreshReg$"],"sources":["/Users/ztlab98/Downloads/shopping-react-assignment-main/src/pages/SignupPage.js"],"sourcesContent":["// import React, { useState } from \"react\"\n// import * as yup from \"yup\"\n// import { useForm } from \"react-hook-form\"\n// import { yupResolver } from \"@hookform/resolvers/yup\"\n// import { Link } from \"react-router-dom\"\n// import \"./Signup.css\"\n// import { regex } from \"../App\"\n// import { encryptPassword } from \"../utils/helperFunctions\"\n\n// export default function SignupPage() {\n//   // const [users, setUsers] = useState([])\n//   const [successMessage, setSuccessMessage] = useState(\"\")\n//   const [error, setError] = useState(false)\n\n//   let userData = \"\"\n\n//   const onSubmit = (submittedData) => {\n//     const hash = encryptPassword(submittedData.password)\n\n//     submittedData.password = hash\n//     submittedData.confirmPassword = hash\n\n//     let users = JSON.parse(localStorage.getItem(\"users\") || \"[]\")\n\n//     // Check If the User is Already Registered or Not\n//     userData = users?.filter((user) => {\n//       return user.email === submittedData.email\n//     })\n\n//     console.log(\"userdata\", userData.length)\n//     if (userData.length > 0) {\n//       // return\n//       setError(true)\n\n//       setTimeout(() => {\n//         setError(false)\n//       }, 5000)\n//     } else {\n//       // const newUser = { ...submittedData }\n//       // setUsers((prevUsers) => [...prevUsers, newUser])\n//       // localStorage.setItem(\"currentSignUpUser\", JSON.stringify(submittedData))\n\n//       users.push(submittedData)\n//       localStorage.setItem(\"users\", JSON.stringify(users))\n//       setSuccessMessage(\"Signup successful!\")\n\n//       // Clear the success message after 5 seconds (5000 milliseconds)\n//       setTimeout(() => {\n//         setSuccessMessage(\"\")\n//       }, 5000)\n//     }\n\n//     // let users = JSON.parse(localStorage.getItem(\"users\") || \"[]\")\n//     // users.push(submittedData)\n//     // localStorage.setItem(\"users\", JSON.stringify(users))\n//   }\n\n//   // useEffect(() => {\n//   //   localStorage.setItem(\"users\", JSON.stringify(users))\n//   // }, [users])\n\n//   const schema = yup.object().shape({\n//     firstName: yup.string().required(),\n//     lastName: yup.string().required(),\n//     mobileNumber: yup.string().min(10).max(10).required(),\n//     email: yup.string().email().required(),\n//     password: yup\n//       .string()\n//       .required()\n//       .max(32)\n//       .min(8)\n//       .matches(\n//         regex,\n//         \"Password must contain at least 8 characters, one uppercase, one number and one special case character\"\n//       ),\n//     confirmPassword: yup\n//       .string()\n//       .oneOf([yup.ref(\"password\"), null], \"Passwords must match\")\n//       .required(),\n//   })\n\n//   const {\n//     handleSubmit,\n//     register,\n//     formState: { errors },\n//   } = useForm({ resolver: yupResolver(schema) })\n\n//   return (\n//     <div className=\"container h-100\">\n//       {error && <p>User Already Exists.</p>}\n//       {successMessage && <p className=\"success-message\">{successMessage}</p>}\n//       <div class=\"row align-items-center\" style={{ height: \"100vh\" }}>\n//         <div class=\"mx-auto col-10 col-md-8 col-lg-6\">\n//           <form\n//             onSubmit={handleSubmit(onSubmit)}\n//             // className=\"signupForm\"\n//           >\n//             <h3 className=\"text-center mb-4\">Signup Form</h3>\n\n//             <div className=\"row\">\n//               <div className=\"w-25 mb-3\">\n//                 <label htmlFor=\"firstName\" className=\"form-label\">\n//                   First Name\n//                 </label>\n//                 <input\n//                   className=\"form-control\"\n//                   type=\"text\"\n//                   placeholder=\"First Name\"\n//                   {...register(\"firstName\")}\n//                   name=\"firstName\"\n//                 />\n//                 <div className=\"form-text\">\n//                   {errors.firstName && <>{errors.firstName.message}</>}\n//                 </div>\n//               </div>\n\n//               <div className=\"w-25 mb-3\">\n//                 <label htmlFor=\"lastName\" className=\"form-label\">\n//                   Last Name\n//                 </label>\n//                 <input\n//                   className=\"form-control\"\n//                   type=\"text\"\n//                   placeholder=\"Last Name\"\n//                   name=\"lastName\"\n//                   {...register(\"lastName\")}\n//                 />\n//               </div>\n\n//               <div className=\"form-text\">\n//                 {errors.lastName && <>{errors.lastName.message}</>}\n//               </div>\n//             </div>\n\n//             <div className=\"row\">\n//               <div className=\"w-25 mb-3\">\n//                 <label htmlFor=\"mobileNumber\" className=\"form-label\">\n//                   Mobile Number\n//                 </label>\n//                 <input\n//                   className=\"form-control\"\n//                   type=\"number\"\n//                   placeholder=\"Mobile Number\"\n//                   name=\"mobileNumber\"\n//                   {...register(\"mobileNumber\")}\n//                 />\n\n//                 <div className=\"form-text\">\n//                   {errors.mobileNumber && <>{errors.mobileNumber.message}</>}\n//                 </div>\n//               </div>\n\n//               <div className=\"w-25 mb-3\">\n//                 <label htmlFor=\"email\" className=\"form-label\">\n//                   Email\n//                 </label>\n//                 <input\n//                   className=\"form-control\"\n//                   type=\"email\"\n//                   placeholder=\"Email\"\n//                   name=\"email\"\n//                   {...register(\"email\")}\n//                 />\n//                 <div className=\"form-text\">\n//                   {errors.email && <>{errors.email.message}</>}\n//                 </div>\n//               </div>\n//             </div>\n\n//             <div className=\"row\">\n//               <div className=\"w-25 mb-3\">\n//                 <label htmlFor=\"password\" className=\"form-label\">\n//                   Password\n//                 </label>\n//                 <input\n//                   className=\"form-control\"\n//                   type=\"password\"\n//                   placeholder=\"Password\"\n//                   name=\"password\"\n//                   {...register(\"password\")}\n//                 />\n//                 <div className=\"form-text\">\n//                   {errors.password && <>{errors.password.message}</>}\n//                 </div>\n//               </div>\n\n//               <div className=\"w-25 mb-3\">\n//                 <label htmlFor=\"confirmPassword\" className=\"form-label\">\n//                   Confirm Password\n//                 </label>\n//                 <input\n//                   className=\"form-control\"\n//                   type=\"password\"\n//                   placeholder=\"Confirm Password\"\n//                   name=\"confirmPassword\"\n//                   {...register(\"confirmPassword\")}\n//                 />\n//                 <div className=\"form-text\">\n//                   {errors.confirmPassword && (\n//                     <>{errors.confirmPassword.message}</>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n\n//             <div>\n//               <button type=\"submit\" className=\"btn btn-primary me-3\">\n//                 SignUp\n//               </button>\n//               {console.log(\"errors : \", errors)}\n//               <Link to=\"/login\" className=\"me-3\">\n//                 Already have an account?\n//               </Link>\n//             </div>\n//           </form>\n//         </div>\n//       </div>\n//     </div>\n//   )\n// }\n\n// import React from \"react\"\n// import { Link } from \"react-router-dom\"\n// import * as yup from \"yup\"\n// import { yupResolver } from \"@hookform/resolvers/yup\"\n// import { useForm } from \"react-hook-form\"\n// import { useNavigate } from \"react-router-dom\"\n// import bcrypt from \"bcryptjs-react\"\n// import { useState } from \"react\"\n\n// import \"./Signup.css\"\n// import { useAuth } from \"../utils/auth\"\n// import { regex } from \"../App\"\n\n// export default function SignupPage() {\n//   const navigate = useNavigate()\n//   const [error, setError] = useState(\"\")\n//   const auth = useAuth()\n\n//   const schema = yup.object().shape({\n//     firstName: yup.string().required(\"First Name is required\"),\n//     lastName: yup.string().required(\"Last Name is required\"),\n//     mobileNumber: yup\n//       .string()\n//       .matches(/^[0-9]{10}$/, \"Mobile Number should be 10 digits\")\n//       .required(\"Mobile Number is required\"),\n//     email: yup.string().email().required(\"Email is required\"),\n//     password: yup\n//       .string()\n//       .required(\"Password is required\")\n//       .max(32, \"Password should be at most 32 characters\")\n//       .min(8, \"Password should be at least 8 characters\")\n//       .matches(regex, \"Password should meet requirements\"),\n//     confirmPassword: yup\n//       .string()\n//       .oneOf([yup.ref(\"password\"), null], \"Passwords must match\")\n//       .required(\"Confirm Password is required\"),\n//   })\n\n//   const onSubmit = (submittedData) => {\n//     console.log(submittedData)\n//     // Add your signup logic here.\n//   }\n\n//   const {\n//     handleSubmit,\n//     register,\n//     formState: { errors },\n//   } = useForm({ resolver: yupResolver(schema) })\n\n// }\n\nimport React, { useState } from \"react\"\nimport * as yup from \"yup\"\nimport { useForm } from \"react-hook-form\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { Link } from \"react-router-dom\"\nimport \"./Signup.css\"\nimport { regex } from \"../App\"\nimport { encryptPassword } from \"../utils/helperFunctions\"\n\nexport default function SignupPage() {\n  // const [users, setUsers] = useState([])\n  const [successMessage, setSuccessMessage] = useState(\"\")\n  const [error, setError] = useState(\"\")\n\n  let userData = \"\"\n\n  const onSubmit = (submittedData) => {\n    const hash = encryptPassword(submittedData.password)\n\n    submittedData.password = hash\n    submittedData.confirmPassword = hash\n\n    let users = JSON.parse(localStorage.getItem(\"users\") || \"[]\")\n\n    // Check If the User is Already Registered or Not\n    userData = users?.filter((user) => {\n      return user.email === submittedData.email\n    })\n\n    console.log(\"userdata\", userData.length)\n    if (userData.length > 0) {\n      // return\n      setError(\"User Already Exists\")\n\n      setTimeout(() => {\n        setError(false)\n      }, 5000)\n    } else {\n      // const newUser = { ...submittedData }\n      // setUsers((prevUsers) => [...prevUsers, newUser])\n      // localStorage.setItem(\"currentSignUpUser\", JSON.stringify(submittedData))\n\n      users.push(submittedData)\n      localStorage.setItem(\"users\", JSON.stringify(users))\n      setSuccessMessage(\"Signup successful!\")\n\n      // Clear the success message after 5 seconds (5000 milliseconds)\n      setTimeout(() => {\n        setSuccessMessage(\"\")\n      }, 5000)\n    }\n\n    // let users = JSON.parse(localStorage.getItem(\"users\") || \"[]\")\n    // users.push(submittedData)\n    // localStorage.setItem(\"users\", JSON.stringify(users))\n  }\n\n  // useEffect(() => {\n  //   localStorage.setItem(\"users\", JSON.stringify(users))\n  // }, [users])\n\n  const schema = yup.object().shape({\n    firstName: yup.string().required(),\n    lastName: yup.string().required(),\n    mobileNumber: yup.string().min(10).max(10).required(),\n    email: yup.string().email().required(),\n    password: yup\n      .string()\n      .required()\n      .max(32)\n      .min(8)\n      .matches(\n        regex,\n        \"Password must contain at least 8 characters, one uppercase, one number and one special case character\"\n      ),\n    confirmPassword: yup\n      .string()\n      .oneOf([yup.ref(\"password\"), null], \"Passwords must match\")\n      .required(),\n  })\n\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n  } = useForm({ resolver: yupResolver(schema) })\n\n  return (\n    <div className=\"container h-100\">\n      {error && <p className=\"alert alert-danger\">{error}</p>}\n      {successMessage && (\n        <p className=\"alert alert-success\">{successMessage}</p>\n      )}\n      <div className=\"row align-items-center\" style={{ height: \"100vh\" }}>\n        <div className=\"mx-auto col-10 col-md-8 col-lg-6\">\n          <form\n            onSubmit={handleSubmit(onSubmit)}\n            className=\"p-4 border rounded bg-white\"\n          >\n            <h3 className=\"text-center mb-4\">Signup Form</h3>\n\n            <div className=\"mb-3\">\n              <label htmlFor=\"firstName\" className=\"form-label\">\n                First Name\n              </label>\n              <input\n                className=\"form-control\"\n                type=\"text\"\n                placeholder=\"First Name\"\n                name=\"firstName\"\n                {...register(\"firstName\")}\n              />\n              <div className=\"form-text\">\n                {errors.firstName && (\n                  <p className=\"text-danger\">{errors.firstName.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"mb-3\">\n              <label htmlFor=\"lastName\" className=\"form-label\">\n                Last Name\n              </label>\n              <input\n                className=\"form-control\"\n                type=\"text\"\n                placeholder=\"Last Name\"\n                name=\"lastName\"\n                {...register(\"lastName\")}\n              />\n              <div className=\"form-text\">\n                {errors.lastName && (\n                  <p className=\"text-danger\">{errors.lastName.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"mb-3\">\n              <label htmlFor=\"mobileNumber\" className=\"form-label\">\n                Mobile Number\n              </label>\n              <input\n                className=\"form-control\"\n                type=\"text\"\n                placeholder=\"Mobile Number\"\n                name=\"mobileNumber\"\n                {...register(\"mobileNumber\")}\n              />\n              <div className=\"form-text\">\n                {errors.mobileNumber && (\n                  <p className=\"text-danger\">{errors.mobileNumber.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"mb-3\">\n              <label htmlFor=\"email\" className=\"form-label\">\n                Email\n              </label>\n              <input\n                className=\"form-control\"\n                type=\"text\"\n                placeholder=\"Email\"\n                name=\"email\"\n                {...register(\"email\")}\n              />\n              <div className=\"form-text\">\n                {errors.email && (\n                  <p className=\"text-danger\">{errors.email.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"mb-3\">\n              <label htmlFor=\"password\" className=\"form-label\">\n                Password\n              </label>\n              <input\n                className=\"form-control\"\n                type=\"password\"\n                placeholder=\"Password\"\n                name=\"password\"\n                {...register(\"password\")}\n              />\n              <div className=\"form-text\">\n                {errors.password && (\n                  <p className=\"text-danger\">{errors.password.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"mb-3\">\n              <label htmlFor=\"confirmPassword\" className=\"form-label\">\n                Confirm Password\n              </label>\n              <input\n                className=\"form-control\"\n                type=\"password\"\n                placeholder=\"Confirm Password\"\n                name=\"confirmPassword\"\n                {...register(\"confirmPassword\")}\n              />\n              <div className=\"form-text\">\n                {errors.confirmPassword && (\n                  <p className=\"text-danger\">\n                    {errors.confirmPassword.message}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"text-center mb-2\">\n              <button type=\"submit\" className=\"btn btn-primary\">\n                Signup\n              </button>\n            </div>\n            <div className=\"text-center\">\n              Already have an account? <Link to=\"/login\">Login Here</Link>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}