{"ast":null,"code":"var _jsxFileName = \"/Users/ztlab98/Downloads/shopping-react-assignment-main/src/pages/Products.js\",\n  _s = $RefreshSig$();\n// import { Link } from \"react-router-dom\"\n// import Navbar from \"../components/Navbar\"\n// import { useEffect, useState } from \"react\"\n\n// const Products = () => {\n//   const [products, setProducts] = useState([])\n//   const [isLoading, setIsLoading] = useState(false)\n//   const [httpError, setHttpError] = useState()\n\n//   useEffect(() => {\n//     const fetchProducts = async () => {\n//       const response = await fetch(\"https://dummyjson.com/products\")\n\n//       if (!response.ok) {\n//         throw new Error(\"Something went wrong!\")\n//       }\n\n//       const responseData = await response.json()\n//       let data = responseData.products\n//       console.log(data)\n\n//       setProducts(data)\n//       setIsLoading(false)\n//     }\n\n//     fetchProducts().catch((error) => {\n//       setIsLoading(false)\n//       setHttpError(error.message)\n//     })\n//   }, [])\n\n//   if (isLoading) {\n//     return (\n//       <section>\n//         <p>Loading...</p>\n//       </section>\n//     )\n//   }\n\n//   if (httpError) {\n//     return (\n//       <section>\n//         <p>{httpError}</p>\n//       </section>\n//     )\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       Products Page:\n//       <div>\n//         <ul>\n//           {products.map((product) => (\n//             <Link to={`${product.id}`}>\n//               <li key={product.id}>{product.title}</li>\n//             </Link>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default Products\n\n// import { Link } from \"react-router-dom\"\n// import Navbar from \"../components/Navbar\"\n// import { useEffect, useState } from \"react\"\n// import classes from \"./Products.module.css\"\n\n// const Products = () => {\n//   const [products, setProducts] = useState([])\n//   const [currentPage, setCurrentPage] = useState(1)\n//   const productsPerPage = 8\n//   const [isLoading, setIsLoading] = useState(false)\n//   const [httpError, setHttpError] = useState()\n\n//   useEffect(() => {\n//     const fetchProducts = async () => {\n//       const response = await fetch(\"https://dummyjson.com/products\")\n\n//       if (!response.ok) {\n//         throw new Error(\"Something went wrong!\")\n//       }\n\n//       const responseData = await response.json()\n//       let data = responseData.products\n\n//       setProducts(data)\n//       setIsLoading(false)\n//     }\n\n//     fetchProducts().catch((error) => {\n//       setIsLoading(false)\n//       setHttpError(error.message)\n//     })\n//   }, [])\n\n//   // Calculate the index range for the current page\n//   const indexOfLastProduct = currentPage * productsPerPage\n//   const indexOfFirstProduct = indexOfLastProduct - productsPerPage\n//   const currentProducts = products.slice(\n//     indexOfFirstProduct,\n//     indexOfLastProduct\n//   )\n\n//   const paginate = (pageNumber) => {\n//     setCurrentPage(pageNumber)\n//   }\n\n//   if (isLoading) {\n//     return (\n//       <section>\n//         <p>Loading...</p>\n//       </section>\n//     )\n//   }\n\n//   if (httpError) {\n//     return (\n//       <section>\n//         <p>{httpError}</p>\n//       </section>\n//     )\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <h2>Products Page:</h2>\n//       <div>\n//         <ul>\n//           {currentProducts.map((product) => (\n//             <Link to={`${product.id}`} key={product.id}>\n//               <li>{product.title}</li>\n//             </Link>\n//           ))}\n//         </ul>\n//       </div>\n\n//       {/* Pagination */}\n//       <div className=\"pagination\">\n//         {Array.from({\n//           length: Math.ceil(products.length / productsPerPage),\n//         }).map((_, index) => (\n//           <button key={index + 1} onClick={() => paginate(index + 1)}>\n//             {index + 1}\n//           </button>\n//         ))}\n//       </div>\n\n//       <div className={classes.pagination}>\n//         {Array.from({\n//           length: Math.ceil(products.length / productsPerPage),\n//         }).map((_, index) => (\n//           <button\n//             key={index + 1}\n//             onClick={() => paginate(index + 1)}\n//             className={classes[\"pagination-button\"]}\n//           >\n//             {index + 1}\n//           </button>\n//         ))}\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default Products\n\n// import { Link } from \"react-router-dom\"\n// import Navbar from \"../components/Navbar\"\n// import { useEffect, useState } from \"react\"\n\n// const Products = () => {\n//   const [products, setProducts] = useState([])\n//   const [currentPage, setCurrentPage] = useState(1)\n//   const productsPerPage = 8\n//   const [isLoading, setIsLoading] = useState(true)\n//   const [httpError, setHttpError] = useState()\n\n//   useEffect(() => {\n//     const fetchProducts = async () => {\n//       try {\n//         const response = await fetch(\"https://dummyjson.com/products\")\n\n//         if (!response.ok) {\n//           throw new Error(\"Something went wrong!\")\n//         }\n\n//         const responseData = await response.json()\n//         let data = responseData.products\n\n//         setProducts(data)\n//         setIsLoading(false)\n//       } catch (error) {\n//         setIsLoading(false)\n//         setHttpError(error.message)\n//       }\n//     }\n\n//     fetchProducts()\n//   }, [])\n\n//   // Calculate the index range for the current page\n//   const indexOfLastProduct = currentPage * productsPerPage\n//   const indexOfFirstProduct = indexOfLastProduct - productsPerPage\n//   const currentProducts = products.slice(\n//     indexOfFirstProduct,\n//     indexOfLastProduct\n//   )\n\n//   const paginate = (pageNumber) => {\n//     setCurrentPage(pageNumber)\n//   }\n\n//   if (isLoading) {\n//     return (\n//       <section>\n//         <p>Loading...</p>\n//       </section>\n//     )\n//   }\n\n//   if (httpError) {\n//     return (\n//       <section>\n//         <p>{httpError}</p>\n//       </section>\n//     )\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <h2 className=\"mt-4\">Products Page:</h2>\n//       <div>\n//         <ul className=\"list-group\">\n//           {currentProducts.map((product) => (\n//             <Link\n//               to={`/${product.id}`}\n//               key={product.id}\n//               className=\"text-decoration-none\"\n//             >\n//               <li className=\"list-group-item\">{product.title}</li>\n//             </Link>\n//           ))}\n//         </ul>\n//       </div>\n\n//       {/* Pagination */}\n//       <div className=\"d-flex justify-content-center mt-4\">\n//         <nav aria-label=\"Page navigation\">\n//           <ul className=\"pagination\">\n//             {Array.from({\n//               length: Math.ceil(products.length / productsPerPage),\n//             }).map((_, index) => (\n//               <li\n//                 key={index}\n//                 className={`page-item ${\n//                   currentPage === index + 1 ? \"active\" : \"\"\n//                 }`}\n//               >\n//                 <button\n//                   className=\"page-link\"\n//                   onClick={() => paginate(index + 1)}\n//                 >\n//                   {index + 1}\n//                 </button>\n//               </li>\n//             ))}\n//           </ul>\n//         </nav>\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default Products\n\n// import { Link } from \"react-router-dom\"\n// import Navbar from \"../components/Navbar\"\n// import { useEffect, useState } from \"react\"\n// import classes from \"./Products.module.css\"\n\n// const Products = () => {\n//   const [products, setProducts] = useState([])\n//   const [currentPage, setCurrentPage] = useState(1)\n//   const productsPerPage = 8\n//   const [isLoading, setIsLoading] = useState(true)\n//   const [httpError, setHttpError] = useState()\n\n//   useEffect(() => {\n//     const fetchProducts = async () => {\n//       try {\n//         const response = await fetch(\"https://dummyjson.com/products\")\n\n//         if (!response.ok) {\n//           throw new Error(\"Something went wrong!\")\n//         }\n\n//         const responseData = await response.json()\n//         let data = responseData.products\n\n//         setProducts(data)\n//         setIsLoading(false)\n//       } catch (error) {\n//         setIsLoading(false)\n//         setHttpError(error.message)\n//       }\n//     }\n\n//     fetchProducts()\n//   }, [])\n\n//   // Calculate the index range for the current page\n//   const indexOfLastProduct = currentPage * productsPerPage\n//   const indexOfFirstProduct = indexOfLastProduct - productsPerPage\n//   const currentProducts = products.slice(\n//     indexOfFirstProduct,\n//     indexOfLastProduct\n//   )\n\n//   const paginate = (pageNumber) => {\n//     setCurrentPage(pageNumber)\n//   }\n\n//   if (isLoading) {\n//     return (\n//       <section>\n//         <p>Loading...</p>\n//       </section>\n//     )\n//   }\n\n//   if (httpError) {\n//     return (\n//       <section>\n//         <p>{httpError}</p>\n//       </section>\n//     )\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <h2 className=\"mt-4\">Products Page:</h2>\n//       <div>\n//         <ul className=\"list-group\">\n//           {currentProducts.map((product) => (\n//             <Link\n//               to={`/${product.id}`}\n//               key={product.id}\n//               className=\"text-decoration-none\"\n//             >\n//               <li className=\"list-group-item\">\n//                 <h4>{product.title}</h4>\n//                 <p>Price: ${product.price}</p>\n//                 <p>Category: {product.category}</p>\n//                 <p>Description: {product.description}</p>\n//               </li>\n//             </Link>\n//           ))}\n//         </ul>\n//       </div>\n\n//       {/* Pagination */}\n//       <div className=\"d-flex justify-content-center mt-4\">\n//         <nav aria-label=\"Page navigation\">\n//           <ul className=\"pagination\">\n//             {Array.from({\n//               length: Math.ceil(products.length / productsPerPage),\n//             }).map((_, index) => (\n//               <li\n//                 key={index}\n//                 className={`page-item ${\n//                   currentPage === index + 1 ? \"active\" : \"\"\n//                 }`}\n//               >\n//                 <button\n//                   className=\"page-link\"\n//                   onClick={() => paginate(index + 1)}\n//                 >\n//                   {index + 1}\n//                 </button>\n//               </li>\n//             ))}\n//           </ul>\n//         </nav>\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default Products\n// import { Link } from \"react-router-dom\"\n// import Navbar from \"../components/Navbar\"\n// import { useEffect, useState } from \"react\"\n\n// import classes from \"./Products.module.css\"\n\n// const Products = () => {\n//   const [products, setProducts] = useState([])\n//   const [currentPage, setCurrentPage] = useState(1)\n//   const productsPerPage = 8\n//   const [isLoading, setIsLoading] = useState(true)\n//   const [httpError, setHttpError] = useState()\n\n//   useEffect(() => {\n//     const fetchProducts = async () => {\n//       try {\n//         const response = await fetch(\"https://dummyjson.com/products\")\n\n//         if (!response.ok) {\n//           throw new Error(\"Something went wrong!\")\n//         }\n\n//         const responseData = await response.json()\n//         let data = responseData.products\n//         console.log(data)\n\n//         setProducts(data)\n//         setIsLoading(false)\n//       } catch (error) {\n//         setIsLoading(false)\n//         setHttpError(error.message)\n//       }\n//     }\n\n//     fetchProducts()\n//   }, [])\n\n//   // Calculate the index range for the current page\n//   const indexOfLastProduct = currentPage * productsPerPage\n//   const indexOfFirstProduct = indexOfLastProduct - productsPerPage\n//   const currentProducts = products.slice(\n//     indexOfFirstProduct,\n//     indexOfLastProduct\n//   )\n\n//   const paginate = (pageNumber) => {\n//     setCurrentPage(pageNumber)\n//   }\n\n//   if (isLoading) {\n//     return (\n//       <section>\n//         <p>Loading...</p>\n//       </section>\n//     )\n//   }\n\n//   if (httpError) {\n//     return (\n//       <section>\n//         <p>{httpError}</p>\n//       </section>\n//     )\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <h2 className=\"mt-4\">Products Page:</h2>\n//       <div className=\"row\">\n//         {currentProducts.map((product) => (\n//           <div className=\"col-md-3 mb-4\" key={product.id}>\n//             <Link\n//               to={`${product.id}`}\n//               className=\"text-decoration-none text-dark\"\n//             >\n//               <div className=\"border p-3 rounded\">\n//                 <img\n//                   src={product.thumbnail}\n//                   alt={product.title}\n//                   className=\"img-fluid mb-3\"\n//                 />\n//                 <h5 className=\"text-primary\">{product.title}</h5>\n//                 <p>Price: ${product.price}</p>\n//                 <p>Category: {product.category}</p>\n//                 <p>Description: {product.description}</p>\n//                 <p>Brand Name: {product.brand}</p>\n//                 <p>Rating: {product.rating}</p>\n//                 <p>Rating: {product.discountPercentage}%</p>\n//                 <button className=\"btn btn-primary\">Show Product</button>\n//               </div>\n//             </Link>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Pagination */}\n//       <div className=\"d-flex justify-content-center mt-4\">\n//         <nav aria-label=\"Page navigation\">\n//           <ul className=\"pagination\">\n//             {Array.from({\n//               length: Math.ceil(products.length / productsPerPage),\n//             }).map((_, index) => (\n//               <li\n//                 key={index}\n//                 className={`page-item ${\n//                   currentPage === index + 1 ? \"active\" : \"\"\n//                 }`}\n//               >\n//                 <button\n//                   className=\"page-link\"\n//                   onClick={() => paginate(index + 1)}\n//                 >\n//                   {index + 1}\n//                 </button>\n//               </li>\n//             ))}\n//           </ul>\n//         </nav>\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default Products\n\nimport { Link } from \"react-router-dom\";\nimport Navbar from \"../components/Navbar\";\nimport { useEffect, useState } from \"react\";\nimport classes from \"./Products.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Products = () => {\n  _s();\n  const [products, setProducts] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const productsPerPage = 8;\n  const [isLoading, setIsLoading] = useState(true);\n  const [httpError, setHttpError] = useState();\n  useEffect(() => {\n    const fetchProducts = async () => {\n      try {\n        const response = await fetch(\"https://dummyjson.com/products\");\n        if (!response.ok) {\n          throw new Error(\"Something went wrong!\");\n        }\n        const responseData = await response.json();\n        let data = responseData.products;\n        console.log(data);\n        setProducts(data);\n        setIsLoading(false);\n      } catch (error) {\n        setIsLoading(false);\n        setHttpError(error.message);\n      }\n    };\n    fetchProducts();\n  }, []);\n\n  // Calculate the index range for the current page\n  const indexOfLastProduct = currentPage * productsPerPage;\n  const indexOfFirstProduct = indexOfLastProduct - productsPerPage;\n  const currentProducts = products.slice(indexOfFirstProduct, indexOfLastProduct);\n  const paginate = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 7\n    }, this);\n  }\n  if (httpError) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: httpError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"mt-4\",\n      children: \"Products Page:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-6\",\n      children: currentProducts.map(product => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `${product.id}`,\n          className: \"text-decoration-none text-dark\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card h-100\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: product.thumbnail,\n              alt: product.title,\n              className: classes[\"card-img-top\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 599,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body d-flex flex-column\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                className: \"card-title text-primary\",\n                children: product.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 605,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-text\",\n                children: [\"Price: $\", product.price]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 606,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-text\",\n                children: [\"Category: \", product.category]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 607,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-text\",\n                children: [\"Description: \", product.description]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 608,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-text\",\n                children: [\"Brand Name: \", product.brand]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 611,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-text\",\n                children: [\"Rating: \", product.rating]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 612,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-text\",\n                children: [\"Discount: \", product.discountPercentage, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 613,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-primary mt-auto\",\n                children: \"Show Product\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 616,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 604,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 598,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 13\n        }, this)\n      }, product.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center mt-4\",\n      children: /*#__PURE__*/_jsxDEV(\"nav\", {\n        \"aria-label\": \"Page navigation\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"pagination\",\n          children: Array.from({\n            length: Math.ceil(products.length / productsPerPage)\n          }).map((_, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `page-item ${currentPage === index + 1 ? \"active\" : \"\"}`,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"page-link\",\n              onClick: () => paginate(index + 1),\n              children: index + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 588,\n    columnNumber: 5\n  }, this);\n};\n_s(Products, \"24xWLcZuEuQrCcRemGvkek3XyFQ=\");\n_c = Products;\nexport default Products;\nvar _c;\n$RefreshReg$(_c, \"Products\");","map":{"version":3,"names":["Link","Navbar","useEffect","useState","classes","jsxDEV","_jsxDEV","Products","_s","products","setProducts","currentPage","setCurrentPage","productsPerPage","isLoading","setIsLoading","httpError","setHttpError","fetchProducts","response","fetch","ok","Error","responseData","json","data","console","log","error","message","indexOfLastProduct","indexOfFirstProduct","currentProducts","slice","paginate","pageNumber","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","product","to","id","src","thumbnail","alt","title","price","category","description","brand","rating","discountPercentage","Array","from","length","Math","ceil","_","index","onClick","_c","$RefreshReg$"],"sources":["/Users/ztlab98/Downloads/shopping-react-assignment-main/src/pages/Products.js"],"sourcesContent":["// import { Link } from \"react-router-dom\"\n// import Navbar from \"../components/Navbar\"\n// import { useEffect, useState } from \"react\"\n\n// const Products = () => {\n//   const [products, setProducts] = useState([])\n//   const [isLoading, setIsLoading] = useState(false)\n//   const [httpError, setHttpError] = useState()\n\n//   useEffect(() => {\n//     const fetchProducts = async () => {\n//       const response = await fetch(\"https://dummyjson.com/products\")\n\n//       if (!response.ok) {\n//         throw new Error(\"Something went wrong!\")\n//       }\n\n//       const responseData = await response.json()\n//       let data = responseData.products\n//       console.log(data)\n\n//       setProducts(data)\n//       setIsLoading(false)\n//     }\n\n//     fetchProducts().catch((error) => {\n//       setIsLoading(false)\n//       setHttpError(error.message)\n//     })\n//   }, [])\n\n//   if (isLoading) {\n//     return (\n//       <section>\n//         <p>Loading...</p>\n//       </section>\n//     )\n//   }\n\n//   if (httpError) {\n//     return (\n//       <section>\n//         <p>{httpError}</p>\n//       </section>\n//     )\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       Products Page:\n//       <div>\n//         <ul>\n//           {products.map((product) => (\n//             <Link to={`${product.id}`}>\n//               <li key={product.id}>{product.title}</li>\n//             </Link>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default Products\n\n// import { Link } from \"react-router-dom\"\n// import Navbar from \"../components/Navbar\"\n// import { useEffect, useState } from \"react\"\n// import classes from \"./Products.module.css\"\n\n// const Products = () => {\n//   const [products, setProducts] = useState([])\n//   const [currentPage, setCurrentPage] = useState(1)\n//   const productsPerPage = 8\n//   const [isLoading, setIsLoading] = useState(false)\n//   const [httpError, setHttpError] = useState()\n\n//   useEffect(() => {\n//     const fetchProducts = async () => {\n//       const response = await fetch(\"https://dummyjson.com/products\")\n\n//       if (!response.ok) {\n//         throw new Error(\"Something went wrong!\")\n//       }\n\n//       const responseData = await response.json()\n//       let data = responseData.products\n\n//       setProducts(data)\n//       setIsLoading(false)\n//     }\n\n//     fetchProducts().catch((error) => {\n//       setIsLoading(false)\n//       setHttpError(error.message)\n//     })\n//   }, [])\n\n//   // Calculate the index range for the current page\n//   const indexOfLastProduct = currentPage * productsPerPage\n//   const indexOfFirstProduct = indexOfLastProduct - productsPerPage\n//   const currentProducts = products.slice(\n//     indexOfFirstProduct,\n//     indexOfLastProduct\n//   )\n\n//   const paginate = (pageNumber) => {\n//     setCurrentPage(pageNumber)\n//   }\n\n//   if (isLoading) {\n//     return (\n//       <section>\n//         <p>Loading...</p>\n//       </section>\n//     )\n//   }\n\n//   if (httpError) {\n//     return (\n//       <section>\n//         <p>{httpError}</p>\n//       </section>\n//     )\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <h2>Products Page:</h2>\n//       <div>\n//         <ul>\n//           {currentProducts.map((product) => (\n//             <Link to={`${product.id}`} key={product.id}>\n//               <li>{product.title}</li>\n//             </Link>\n//           ))}\n//         </ul>\n//       </div>\n\n//       {/* Pagination */}\n//       <div className=\"pagination\">\n//         {Array.from({\n//           length: Math.ceil(products.length / productsPerPage),\n//         }).map((_, index) => (\n//           <button key={index + 1} onClick={() => paginate(index + 1)}>\n//             {index + 1}\n//           </button>\n//         ))}\n//       </div>\n\n//       <div className={classes.pagination}>\n//         {Array.from({\n//           length: Math.ceil(products.length / productsPerPage),\n//         }).map((_, index) => (\n//           <button\n//             key={index + 1}\n//             onClick={() => paginate(index + 1)}\n//             className={classes[\"pagination-button\"]}\n//           >\n//             {index + 1}\n//           </button>\n//         ))}\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default Products\n\n// import { Link } from \"react-router-dom\"\n// import Navbar from \"../components/Navbar\"\n// import { useEffect, useState } from \"react\"\n\n// const Products = () => {\n//   const [products, setProducts] = useState([])\n//   const [currentPage, setCurrentPage] = useState(1)\n//   const productsPerPage = 8\n//   const [isLoading, setIsLoading] = useState(true)\n//   const [httpError, setHttpError] = useState()\n\n//   useEffect(() => {\n//     const fetchProducts = async () => {\n//       try {\n//         const response = await fetch(\"https://dummyjson.com/products\")\n\n//         if (!response.ok) {\n//           throw new Error(\"Something went wrong!\")\n//         }\n\n//         const responseData = await response.json()\n//         let data = responseData.products\n\n//         setProducts(data)\n//         setIsLoading(false)\n//       } catch (error) {\n//         setIsLoading(false)\n//         setHttpError(error.message)\n//       }\n//     }\n\n//     fetchProducts()\n//   }, [])\n\n//   // Calculate the index range for the current page\n//   const indexOfLastProduct = currentPage * productsPerPage\n//   const indexOfFirstProduct = indexOfLastProduct - productsPerPage\n//   const currentProducts = products.slice(\n//     indexOfFirstProduct,\n//     indexOfLastProduct\n//   )\n\n//   const paginate = (pageNumber) => {\n//     setCurrentPage(pageNumber)\n//   }\n\n//   if (isLoading) {\n//     return (\n//       <section>\n//         <p>Loading...</p>\n//       </section>\n//     )\n//   }\n\n//   if (httpError) {\n//     return (\n//       <section>\n//         <p>{httpError}</p>\n//       </section>\n//     )\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <h2 className=\"mt-4\">Products Page:</h2>\n//       <div>\n//         <ul className=\"list-group\">\n//           {currentProducts.map((product) => (\n//             <Link\n//               to={`/${product.id}`}\n//               key={product.id}\n//               className=\"text-decoration-none\"\n//             >\n//               <li className=\"list-group-item\">{product.title}</li>\n//             </Link>\n//           ))}\n//         </ul>\n//       </div>\n\n//       {/* Pagination */}\n//       <div className=\"d-flex justify-content-center mt-4\">\n//         <nav aria-label=\"Page navigation\">\n//           <ul className=\"pagination\">\n//             {Array.from({\n//               length: Math.ceil(products.length / productsPerPage),\n//             }).map((_, index) => (\n//               <li\n//                 key={index}\n//                 className={`page-item ${\n//                   currentPage === index + 1 ? \"active\" : \"\"\n//                 }`}\n//               >\n//                 <button\n//                   className=\"page-link\"\n//                   onClick={() => paginate(index + 1)}\n//                 >\n//                   {index + 1}\n//                 </button>\n//               </li>\n//             ))}\n//           </ul>\n//         </nav>\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default Products\n\n// import { Link } from \"react-router-dom\"\n// import Navbar from \"../components/Navbar\"\n// import { useEffect, useState } from \"react\"\n// import classes from \"./Products.module.css\"\n\n// const Products = () => {\n//   const [products, setProducts] = useState([])\n//   const [currentPage, setCurrentPage] = useState(1)\n//   const productsPerPage = 8\n//   const [isLoading, setIsLoading] = useState(true)\n//   const [httpError, setHttpError] = useState()\n\n//   useEffect(() => {\n//     const fetchProducts = async () => {\n//       try {\n//         const response = await fetch(\"https://dummyjson.com/products\")\n\n//         if (!response.ok) {\n//           throw new Error(\"Something went wrong!\")\n//         }\n\n//         const responseData = await response.json()\n//         let data = responseData.products\n\n//         setProducts(data)\n//         setIsLoading(false)\n//       } catch (error) {\n//         setIsLoading(false)\n//         setHttpError(error.message)\n//       }\n//     }\n\n//     fetchProducts()\n//   }, [])\n\n//   // Calculate the index range for the current page\n//   const indexOfLastProduct = currentPage * productsPerPage\n//   const indexOfFirstProduct = indexOfLastProduct - productsPerPage\n//   const currentProducts = products.slice(\n//     indexOfFirstProduct,\n//     indexOfLastProduct\n//   )\n\n//   const paginate = (pageNumber) => {\n//     setCurrentPage(pageNumber)\n//   }\n\n//   if (isLoading) {\n//     return (\n//       <section>\n//         <p>Loading...</p>\n//       </section>\n//     )\n//   }\n\n//   if (httpError) {\n//     return (\n//       <section>\n//         <p>{httpError}</p>\n//       </section>\n//     )\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <h2 className=\"mt-4\">Products Page:</h2>\n//       <div>\n//         <ul className=\"list-group\">\n//           {currentProducts.map((product) => (\n//             <Link\n//               to={`/${product.id}`}\n//               key={product.id}\n//               className=\"text-decoration-none\"\n//             >\n//               <li className=\"list-group-item\">\n//                 <h4>{product.title}</h4>\n//                 <p>Price: ${product.price}</p>\n//                 <p>Category: {product.category}</p>\n//                 <p>Description: {product.description}</p>\n//               </li>\n//             </Link>\n//           ))}\n//         </ul>\n//       </div>\n\n//       {/* Pagination */}\n//       <div className=\"d-flex justify-content-center mt-4\">\n//         <nav aria-label=\"Page navigation\">\n//           <ul className=\"pagination\">\n//             {Array.from({\n//               length: Math.ceil(products.length / productsPerPage),\n//             }).map((_, index) => (\n//               <li\n//                 key={index}\n//                 className={`page-item ${\n//                   currentPage === index + 1 ? \"active\" : \"\"\n//                 }`}\n//               >\n//                 <button\n//                   className=\"page-link\"\n//                   onClick={() => paginate(index + 1)}\n//                 >\n//                   {index + 1}\n//                 </button>\n//               </li>\n//             ))}\n//           </ul>\n//         </nav>\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default Products\n// import { Link } from \"react-router-dom\"\n// import Navbar from \"../components/Navbar\"\n// import { useEffect, useState } from \"react\"\n\n// import classes from \"./Products.module.css\"\n\n// const Products = () => {\n//   const [products, setProducts] = useState([])\n//   const [currentPage, setCurrentPage] = useState(1)\n//   const productsPerPage = 8\n//   const [isLoading, setIsLoading] = useState(true)\n//   const [httpError, setHttpError] = useState()\n\n//   useEffect(() => {\n//     const fetchProducts = async () => {\n//       try {\n//         const response = await fetch(\"https://dummyjson.com/products\")\n\n//         if (!response.ok) {\n//           throw new Error(\"Something went wrong!\")\n//         }\n\n//         const responseData = await response.json()\n//         let data = responseData.products\n//         console.log(data)\n\n//         setProducts(data)\n//         setIsLoading(false)\n//       } catch (error) {\n//         setIsLoading(false)\n//         setHttpError(error.message)\n//       }\n//     }\n\n//     fetchProducts()\n//   }, [])\n\n//   // Calculate the index range for the current page\n//   const indexOfLastProduct = currentPage * productsPerPage\n//   const indexOfFirstProduct = indexOfLastProduct - productsPerPage\n//   const currentProducts = products.slice(\n//     indexOfFirstProduct,\n//     indexOfLastProduct\n//   )\n\n//   const paginate = (pageNumber) => {\n//     setCurrentPage(pageNumber)\n//   }\n\n//   if (isLoading) {\n//     return (\n//       <section>\n//         <p>Loading...</p>\n//       </section>\n//     )\n//   }\n\n//   if (httpError) {\n//     return (\n//       <section>\n//         <p>{httpError}</p>\n//       </section>\n//     )\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <h2 className=\"mt-4\">Products Page:</h2>\n//       <div className=\"row\">\n//         {currentProducts.map((product) => (\n//           <div className=\"col-md-3 mb-4\" key={product.id}>\n//             <Link\n//               to={`${product.id}`}\n//               className=\"text-decoration-none text-dark\"\n//             >\n//               <div className=\"border p-3 rounded\">\n//                 <img\n//                   src={product.thumbnail}\n//                   alt={product.title}\n//                   className=\"img-fluid mb-3\"\n//                 />\n//                 <h5 className=\"text-primary\">{product.title}</h5>\n//                 <p>Price: ${product.price}</p>\n//                 <p>Category: {product.category}</p>\n//                 <p>Description: {product.description}</p>\n//                 <p>Brand Name: {product.brand}</p>\n//                 <p>Rating: {product.rating}</p>\n//                 <p>Rating: {product.discountPercentage}%</p>\n//                 <button className=\"btn btn-primary\">Show Product</button>\n//               </div>\n//             </Link>\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Pagination */}\n//       <div className=\"d-flex justify-content-center mt-4\">\n//         <nav aria-label=\"Page navigation\">\n//           <ul className=\"pagination\">\n//             {Array.from({\n//               length: Math.ceil(products.length / productsPerPage),\n//             }).map((_, index) => (\n//               <li\n//                 key={index}\n//                 className={`page-item ${\n//                   currentPage === index + 1 ? \"active\" : \"\"\n//                 }`}\n//               >\n//                 <button\n//                   className=\"page-link\"\n//                   onClick={() => paginate(index + 1)}\n//                 >\n//                   {index + 1}\n//                 </button>\n//               </li>\n//             ))}\n//           </ul>\n//         </nav>\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default Products\n\nimport { Link } from \"react-router-dom\"\nimport Navbar from \"../components/Navbar\"\nimport { useEffect, useState } from \"react\"\nimport classes from \"./Products.module.css\"\n\nconst Products = () => {\n  const [products, setProducts] = useState([])\n  const [currentPage, setCurrentPage] = useState(1)\n  const productsPerPage = 8\n  const [isLoading, setIsLoading] = useState(true)\n  const [httpError, setHttpError] = useState()\n\n  useEffect(() => {\n    const fetchProducts = async () => {\n      try {\n        const response = await fetch(\"https://dummyjson.com/products\")\n\n        if (!response.ok) {\n          throw new Error(\"Something went wrong!\")\n        }\n\n        const responseData = await response.json()\n        let data = responseData.products\n        console.log(data)\n\n        setProducts(data)\n        setIsLoading(false)\n      } catch (error) {\n        setIsLoading(false)\n        setHttpError(error.message)\n      }\n    }\n\n    fetchProducts()\n  }, [])\n\n  // Calculate the index range for the current page\n  const indexOfLastProduct = currentPage * productsPerPage\n  const indexOfFirstProduct = indexOfLastProduct - productsPerPage\n  const currentProducts = products.slice(\n    indexOfFirstProduct,\n    indexOfLastProduct\n  )\n\n  const paginate = (pageNumber) => {\n    setCurrentPage(pageNumber)\n  }\n\n  if (isLoading) {\n    return (\n      <section>\n        <p>Loading...</p>\n      </section>\n    )\n  }\n\n  if (httpError) {\n    return (\n      <section>\n        <p>{httpError}</p>\n      </section>\n    )\n  }\n\n  return (\n    <div>\n      <Navbar />\n      <h2 className=\"mt-4\">Products Page:</h2>\n      <div className=\"row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-6\">\n        {currentProducts.map((product) => (\n          <div className=\"mb-4\" key={product.id}>\n            <Link\n              to={`${product.id}`}\n              className=\"text-decoration-none text-dark\"\n            >\n              <div className=\"card h-100\">\n                <img\n                  src={product.thumbnail}\n                  alt={product.title}\n                  className={classes[\"card-img-top\"]}\n                />\n                <div className=\"card-body d-flex flex-column\">\n                  <h5 className=\"card-title text-primary\">{product.title}</h5>\n                  <p className=\"card-text\">Price: ${product.price}</p>\n                  <p className=\"card-text\">Category: {product.category}</p>\n                  <p className=\"card-text\">\n                    Description: {product.description}\n                  </p>\n                  <p className=\"card-text\">Brand Name: {product.brand}</p>\n                  <p className=\"card-text\">Rating: {product.rating}</p>\n                  <p className=\"card-text\">\n                    Discount: {product.discountPercentage}%\n                  </p>\n                  <button className=\"btn btn-primary mt-auto\">\n                    Show Product\n                  </button>\n                </div>\n              </div>\n            </Link>\n          </div>\n        ))}\n      </div>\n\n      {/* Pagination */}\n      <div className=\"d-flex justify-content-center mt-4\">\n        <nav aria-label=\"Page navigation\">\n          <ul className=\"pagination\">\n            {Array.from({\n              length: Math.ceil(products.length / productsPerPage),\n            }).map((_, index) => (\n              <li\n                key={index}\n                className={`page-item ${\n                  currentPage === index + 1 ? \"active\" : \"\"\n                }`}\n              >\n                <button\n                  className=\"page-link\"\n                  onClick={() => paginate(index + 1)}\n                >\n                  {index + 1}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </nav>\n      </div>\n    </div>\n  )\n}\n\nexport default Products\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAASA,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,MAAM,MAAM,sBAAsB;AAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}